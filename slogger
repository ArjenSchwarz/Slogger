#!/usr/bin/env ruby
MAJOR_VERSION = 2.0
MINOR_VERSION = 4
require 'open-uri'
require 'net/http'
require 'net/https'
require 'time'
require 'cgi'
require 'rss'
require 'erb'
require 'logger'
require 'optparse'
require RUBY_VERSION < "1.9" ? 'ftools' : 'fileutils'

SLOGGER_HOME = File.dirname(File.expand_path(__FILE__))
ENV['SLOGGER_HOME'] = SLOGGER_HOME

require SLOGGER_HOME + '/lib/sociallogger'
require SLOGGER_HOME + '/lib/configtools'
require SLOGGER_HOME + '/lib/json'

class String
  def markdownify
    contents = ''
    IO.popen('"$SLOGGER_HOME/lib/html2text"', "r+") do |io|

      Thread.new { self.each_line { |line|
        io << line
      }; io.close_write }

      io.each_line do |line|
        contents << line
      end
    end
    contents
  end

  def e_sh
    self.to_s.gsub(/(?=[^a-zA-Z0-9_.\/\-\x7F-\xFF\n])/, '\\').gsub(/\n/, "'\n'").sub(/^$/, "''")
  end

end

class Slogger

  attr_accessor :config, :dayonepath, :plugins, :timespan, :log
  def initialize
    cfg = ConfigTools.new

    @log = Logger.new(STDERR)
    original_formatter = Logger::Formatter.new
    @log.datetime_format = '%d'
    @log.level = 1
    @log.progname = self.class.name
    @log.formatter = proc { |severity, datetime, progname, msg|
      abbr_sev = case severity
        when 'WARN' then "> "
        when 'ERROR' then " !"
        when 'FATAL' then "!!"
        else "  "
      end
      output = @config[:quiet] ? '' : "#{abbr_sev}#{datetime.strftime('%H:%M:%S')} #{progname} -> #{msg}\n"
      output
      # original_formatter.call(severity, datetime, progname, msg.dump)
    }

    @template = self.template
    @plugins = []
    @timespan = Time.now - (60 * 60 * 24)
    if cfg.config_exists?
      @config = cfg.load_config
      if @config.nil?
        raise "Config should not be nil"
        Process.exit(-1)
      end
    end
  end

  def storage_path
  	if @config.key?('storage')
	    if @config['storage'].downcase == 'icloud'
	      dayonedir = %x{ls ~/Library/Mobile\\ Documents/|grep dayoneapp}.strip
	      full_path = File.expand_path("~/Library/Mobile\ Documents/#{dayonedir}/Documents/Journal_dayone/")
	      if File.exists?(full_path)
	        return full_path
	      else
	        raise "Failed to find iCloud storage path"
	        Process.exit(-1)
	      end
	    elsif File.exists?(File.expand_path(@config['storage']))
	      return File.expand_path(@config['storage'])
	    else
	      raise "Path not specified or doesn't exist: #{@config['storage']}"
	      Process.exit(-1)
	    end
	else
	  raise "Path not specified or doesn't exist: #{@config['storage']}"
	  return
	end
  end

  def run_plugins
    new_options = false
    plugin_dir = @config[:develop] ? "/plugins_develop/*.rb" : "/plugins/*.rb"
    Dir[SLOGGER_HOME + plugin_dir].each do |file|
      require file
    end
    @plugins.each do |plugin|
      _namespace = plugin['class'].to_s

      @config[_namespace] ||= {}
      plugin['config'].each do |k,v|
        @config[_namespace][k] ||= v
      end
      ConfigTools.new.dump_config(@config)
      eval(plugin['class']).new.do_log
    end
    ConfigTools.new.dump_config(@config) if new_options
  end

  def register_plugin(plugin)
    @plugins.push plugin
  end

  def template
    ERB.new <<-XMLTEMPLATE
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Creation Date</key>
  <date><%= datestamp %></date>
  <key>Entry Text</key>
  <string><%= entry %></string>
  <key>Starred</key>
  <<%= starred %>/>
  <key>UUID</key>
  <string><%= uuid %></string>
</dict>
</plist>
XMLTEMPLATE
  end
end

require SLOGGER_HOME + '/lib/redirect'
require SLOGGER_HOME + '/lib/dayone'
$stdout.puts "Initializing Slogger v#{MAJOR_VERSION} (#{MAJOR_VERSION}.#{MINOR_VERSION})..."

$slog = Slogger.new
$slog.dayonepath = $slog.storage_path

optparse = OptionParser.new do|opts|
  opts.banner = "Usage: slogger [-dq] [-r X] [/path/to/image.jpg]"
  $slog.config[:develop] = false
  opts.on( '-d','--develop', 'Develop mode' ) do
    $slog.config[:develop] = true
  end
  $slog.config[:quiet] = false
  opts.on( '-q','--quiet', 'Run quietly (no notifications/messages)' ) do
   $slog.config[:quiet] = true
  end
  $slog.config[:max_retries] = 1
  opts.on( '-r','--retries COUNT', 'Maximum number of retries per plugin (int)' ) do |count|
    $slog.config[:max_retries] = count.to_i
  end
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!

if ARGV.length > 0
  if File.exists?(File.expand_path(ARGV[0]))
    DayOne.new.store_single_photo(ARGV[0],{},true)
  else
    raise "File #{ARGV[0]} not found."
  end
else
  puts "Running"
  $slog.run_plugins
end

# TODO: Document plugin architecture
# TODO: Handle RSS anomolies, fail gracefully
# TODO: Command line option for defining timespan to pull for
# TODO: Command line option for undo
# TODO: Command line help (slogger -h)
# TODO: Sort plugin options, extract descriptions to MD file w/command line option to display (slogger --plugins)
# TODO: GUI
